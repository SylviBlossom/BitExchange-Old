package moe.sylvi.bitexchange.data;

import appeng.core.definitions.AEBlocks;
import appeng.core.definitions.AEItems;
import moe.sylvi.bitexchange.BitExchange;
import moe.sylvi.bitexchange.data.api.BitProvider;
import net.fabricmc.fabric.api.datagen.v1.FabricDataGenerator;
import net.minecraft.item.Item;
import net.minecraft.item.Items;
import net.minecraft.tag.ItemTags;
import net.minecraft.tag.TagKey;
import net.minecraft.util.Identifier;
import net.minecraft.util.registry.Registry;

public class BitExchangeItemBitProvider extends BitProvider {
    //// Vanilla common tags
    private static final TagKey<Item> C_SHULKER_BOXES   = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "shulker_boxes"));
    private static final TagKey<Item> C_COPPER_INGOTS   = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "copper_ingots"));
    private static final TagKey<Item> C_IRON_INGOTS     = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "iron_ingots"));
    private static final TagKey<Item> C_GOLD_INGOTS     = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "gold_ingots"));

    //// Modded common tags
    // Ingots
    private static final TagKey<Item> C_TIN_INGOTS      = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "tin_ingots"));
    private static final TagKey<Item> C_LEAD_INGOTS     = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "lead_ingots"));
    private static final TagKey<Item> C_ALUMINUM_INGOTS = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "aluminum_ingots"));
    private static final TagKey<Item> C_NICKEL_INGOTS   = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "nickel_ingots"));
    private static final TagKey<Item> C_SILVER_INGOTS   = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "silver_ingots"));
    private static final TagKey<Item> C_URANIUM_INGOTS  = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "uranium_ingots"));
    private static final TagKey<Item> C_TUNGSTEN_INGOTS = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "tungsten_ingots"));
    private static final TagKey<Item> C_IRIDIUM_INGOTS  = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "iridium_ingots"));
    private static final TagKey<Item> C_TITANIUM_INGOTS = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "titanium_ingots"));
    private static final TagKey<Item> C_PLATINUM_INGOTS = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "platinum_ingots"));
    // Dusts
    private static final TagKey<Item> C_COPPER_DUSTS    = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "copper_dusts"));
    private static final TagKey<Item> C_IRON_DUSTS      = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "iron_dusts"));
    private static final TagKey<Item> C_GOLD_DUSTS      = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "gold_dusts"));

    private static final TagKey<Item> C_BAUXITE_DUSTS   = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "bauxite_dusts"));
    private static final TagKey<Item> C_SALTS           = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "salts"));
    private static final TagKey<Item> C_SALT_DUSTS      = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "salt_dusts"));

    //// Modern Industrialization common tags
    private static final TagKey<Item> C_LIGNITE_COAL    = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "lignite_coal"));
    private static final TagKey<Item> C_ANTIMONY_INGOTS = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "antimony_ingots"));
    private static final TagKey<Item> C_MOZANITE_DUSTS  = TagKey.of(Registry.ITEM_KEY, new Identifier("c", "mozanite_dusts"));

    public BitExchangeItemBitProvider(FabricDataGenerator generator) {
        super(generator);
    }

    @Override
    public void build() {
        var builder = itemBuilder(new Identifier(BitExchange.MOD_ID, "items/bit_exchange")).noOverride();
        builder.register(BitExchange.BIT_ITEM,      1,       8   );
        builder.register(BitExchange.BYTE_ITEM,     8,       64  );
        builder.register(BitExchange.KILOBIT_ITEM,  64,      64  );
        builder.register(BitExchange.MEGABIT_ITEM,  512,     64  );
        builder.register(BitExchange.GIGABIT_ITEM,  4096,    64  );
        builder.register(BitExchange.TERABIT_ITEM,  32768,   64  );
        builder.register(BitExchange.PETABIT_ITEM,  262144,  64  );
        builder.register(BitExchange.EXABIT_ITEM,   2097152, 64  );
        builder.register(BitExchange.ITTY_BIT_ITEM, 0.01,    1000);

        builder = itemBuilder(new Identifier(BitExchange.MOD_ID, "items/minecraft")).noOverride();
        // concrete.json
        builder.register(Items.WHITE_CONCRETE     ).valueRef(Items.WHITE_CONCRETE_POWDER,      1).research(1).nonAutomatable();
        builder.register(Items.ORANGE_CONCRETE    ).valueRef(Items.ORANGE_CONCRETE_POWDER,     1).research(1).nonAutomatable();
        builder.register(Items.MAGENTA_CONCRETE   ).valueRef(Items.MAGENTA_CONCRETE_POWDER,    1).research(1).nonAutomatable();
        builder.register(Items.LIGHT_BLUE_CONCRETE).valueRef(Items.LIGHT_BLUE_CONCRETE_POWDER, 1).research(1).nonAutomatable();
        builder.register(Items.YELLOW_CONCRETE    ).valueRef(Items.YELLOW_CONCRETE_POWDER,     1).research(1).nonAutomatable();
        builder.register(Items.LIME_CONCRETE      ).valueRef(Items.LIME_CONCRETE_POWDER,       1).research(1).nonAutomatable();
        builder.register(Items.PINK_CONCRETE      ).valueRef(Items.PINK_CONCRETE_POWDER,       1).research(1).nonAutomatable();
        builder.register(Items.GRAY_CONCRETE      ).valueRef(Items.GRAY_CONCRETE_POWDER,       1).research(1).nonAutomatable();
        builder.register(Items.LIGHT_GRAY_CONCRETE).valueRef(Items.LIGHT_GRAY_CONCRETE_POWDER, 1).research(1).nonAutomatable();
        builder.register(Items.CYAN_CONCRETE      ).valueRef(Items.CYAN_CONCRETE_POWDER,       1).research(1).nonAutomatable();
        builder.register(Items.PURPLE_CONCRETE    ).valueRef(Items.PURPLE_CONCRETE_POWDER,     1).research(1).nonAutomatable();
        builder.register(Items.BLUE_CONCRETE      ).valueRef(Items.BLUE_CONCRETE_POWDER,       1).research(1).nonAutomatable();
        builder.register(Items.BROWN_CONCRETE     ).valueRef(Items.BROWN_CONCRETE_POWDER,      1).research(1).nonAutomatable();
        builder.register(Items.GREEN_CONCRETE     ).valueRef(Items.GREEN_CONCRETE_POWDER,      1).research(1).nonAutomatable();
        builder.register(Items.RED_CONCRETE       ).valueRef(Items.RED_CONCRETE_POWDER,        1).research(1).nonAutomatable();
        builder.register(Items.BLACK_CONCRETE     ).valueRef(Items.BLACK_CONCRETE_POWDER,      1).research(1).nonAutomatable();
        // copper_blocks.json
        builder.register(Items.EXPOSED_COPPER                   ).copy(Items.COPPER_BLOCK);
        builder.register(Items.WEATHERED_COPPER                 ).copy(Items.COPPER_BLOCK);
        builder.register(Items.OXIDIZED_COPPER                  ).copy(Items.COPPER_BLOCK);
        builder.register(Items.WAXED_EXPOSED_COPPER             ).copy(Items.WAXED_COPPER_BLOCK);
        builder.register(Items.WAXED_WEATHERED_COPPER           ).copy(Items.WAXED_COPPER_BLOCK);
        builder.register(Items.WAXED_OXIDIZED_COPPER            ).copy(Items.WAXED_COPPER_BLOCK);
        builder.register(Items.EXPOSED_CUT_COPPER               ).copy(Items.CUT_COPPER);
        builder.register(Items.WEATHERED_CUT_COPPER             ).copy(Items.CUT_COPPER);
        builder.register(Items.OXIDIZED_CUT_COPPER              ).copy(Items.CUT_COPPER);
        builder.register(Items.WAXED_EXPOSED_CUT_COPPER         ).copy(Items.WAXED_CUT_COPPER);
        builder.register(Items.WAXED_WEATHERED_CUT_COPPER       ).copy(Items.WAXED_CUT_COPPER);
        builder.register(Items.WAXED_OXIDIZED_CUT_COPPER        ).copy(Items.WAXED_CUT_COPPER);
        builder.register(Items.EXPOSED_CUT_COPPER_STAIRS        ).copy(Items.CUT_COPPER_STAIRS);
        builder.register(Items.WEATHERED_CUT_COPPER_STAIRS      ).copy(Items.CUT_COPPER_STAIRS);
        builder.register(Items.OXIDIZED_CUT_COPPER_STAIRS       ).copy(Items.CUT_COPPER_STAIRS);
        builder.register(Items.WAXED_EXPOSED_CUT_COPPER_STAIRS  ).copy(Items.WAXED_CUT_COPPER_STAIRS);
        builder.register(Items.WAXED_WEATHERED_CUT_COPPER_STAIRS).copy(Items.WAXED_CUT_COPPER_STAIRS);
        builder.register(Items.WAXED_OXIDIZED_CUT_COPPER_STAIRS ).copy(Items.WAXED_CUT_COPPER_STAIRS);
        builder.register(Items.EXPOSED_CUT_COPPER_SLAB          ).copy(Items.CUT_COPPER_SLAB);
        builder.register(Items.WEATHERED_CUT_COPPER_SLAB        ).copy(Items.CUT_COPPER_SLAB);
        builder.register(Items.OXIDIZED_CUT_COPPER_SLAB         ).copy(Items.CUT_COPPER_SLAB);
        builder.register(Items.WAXED_EXPOSED_CUT_COPPER_SLAB    ).copy(Items.WAXED_CUT_COPPER_SLAB);
        builder.register(Items.WAXED_WEATHERED_CUT_COPPER_SLAB  ).copy(Items.WAXED_CUT_COPPER_SLAB);
        builder.register(Items.WAXED_OXIDIZED_CUT_COPPER_SLAB   ).copy(Items.WAXED_CUT_COPPER_SLAB);
        // end.json
        builder.register(Items.END_STONE,              1,      16);
        builder.register(Items.CHORUS_PLANT,           64,     16);
        builder.register(Items.CHORUS_FLOWER,          96,     8 );
        builder.register(Items.CHORUS_FRUIT,           192,    16);
        builder.register(Items.ELYTRA,                 131072, 2 );
        // misc_blocks.json
        builder.register(Items.CLAY).valueRef(Items.CLAY_BALL,  4).research(1).nonAutomatable();
        builder.register(Items.BELL).valueRef(Items.GOLD_INGOT, 7).research(4).nonAutomatable();
        builder.register(Items.OBSIDIAN,               64,     8 );
        builder.register(Items.MELON,                  144,    8 );
        builder.register(Items.PUMPKIN,                144,    8 );
        builder.register(Items.CARVED_PUMPKIN,         144,    8 );
        builder.register(Items.COBWEB,                 12,     16);
        // misc_items.json
        builder.register(Items.MILK_BUCKET         ).valueRef(Items.BUCKET,       1).value(64);
        builder.register(Items.POWDER_SNOW_BUCKET  ).valueRef(Items.BUCKET,       1).value(1).research(4);
        builder.register(Items.PUFFERFISH_BUCKET   ).valueRef(Items.WATER_BUCKET, 1).valueRef(Items.PUFFERFISH,    1).research(4);
        builder.register(Items.SALMON_BUCKET       ).valueRef(Items.WATER_BUCKET, 1).valueRef(Items.SALMON,        1).research(4);
        builder.register(Items.COD_BUCKET          ).valueRef(Items.WATER_BUCKET, 1).valueRef(Items.COD,           1).research(4);
        builder.register(Items.TROPICAL_FISH_BUCKET).valueRef(Items.WATER_BUCKET, 1).valueRef(Items.TROPICAL_FISH, 1).research(4);
        builder.register(Items.AXOLOTL_BUCKET      ).valueRef(Items.WATER_BUCKET, 1).value(64).research(4);
        builder.register(Items.TADPOLE_BUCKET      ).valueRef(Items.WATER_BUCKET, 1).value(64).research(4);
        builder.register(Items.HONEY_BOTTLE        ).valueRef(Items.SUGAR,        3).valueRef(Items.GLASS_BOTTLE,  1).research(8).requireResearch(Items.GLASS_BOTTLE);
        builder.register(Items.IRON_HORSE_ARMOR    ).valueRef(Items.IRON_INGOT,   8).research(4);
        builder.register(Items.GOLDEN_HORSE_ARMOR  ).valueRef(Items.GOLD_INGOT,   8).research(4);
        builder.register(Items.DIAMOND_HORSE_ARMOR ).valueRef(Items.DIAMOND,      8).research(4);
        builder.register(Items.FLINT,                  4,      8 );
        builder.register(Items.APPLE,                  128,    8 );
        builder.register(Items.WHEAT_SEEDS,            16,     16);
        builder.register(Items.MELON_SEEDS,            16,     16);
        builder.register(Items.PUMPKIN_SEEDS,          16,     16);
        builder.register(Items.BEETROOT_SEEDS,         16,     16);
        builder.register(Items.WHEAT,                  24,     16);
        builder.register(Items.BEETROOT,               24,     16);
        builder.register(Items.CARROT,                 24,     16);
        builder.register(Items.POTATO,                 24,     16);
        builder.register(Items.POISONOUS_POTATO,       24,     16);
        builder.register(Items.MELON_SLICE,            16,     16);
        builder.register(Items.SWEET_BERRIES,          16,     16);
        builder.register(Items.GLOW_BERRIES,           16,     16);
        builder.register(Items.COCOA_BEANS,            64,     16);
        builder.register(Items.CLAY_BALL,              16,     16);
        builder.register(Items.ENCHANTED_GOLDEN_APPLE, 131072, 4 );
        builder.register(Items.SADDLE,                 192,    4 );
        builder.register(Items.NAME_TAG,               192,    4 );
        builder.register(Items.HONEYCOMB,              32,     16);
        builder.register(Items.DRAGON_BREATH,          2,      4 );
        builder.register(Items.EXPERIENCE_BOTTLE,      384,    8 );
        builder.register(Items.ECHO_SHARD,             864,    12);
        builder.register(Items.DISC_FRAGMENT_5,        0,      12).valueRef(Items.MUSIC_DISC_5, 1.0/9.0).noRequiredResearch();
        builder.register(Items.GOAT_HORN,              1536,   2 );
        // mob_drops.json
        builder.register(Items.BEEF,                   64,     16);
        builder.register(Items.CHICKEN,                64,     16);
        builder.register(Items.MUTTON,                 64,     16);
        builder.register(Items.PORKCHOP,               64,     16);
        builder.register(Items.RABBIT,                 64,     16);
        builder.register(Items.COD,                    64,     16);
        builder.register(Items.SALMON,                 64,     16);
        builder.register(Items.PUFFERFISH,             64,     16);
        builder.register(Items.TROPICAL_FISH,          64,     16);
        builder.register(Items.LEATHER,                64,     16);
        builder.register(Items.RABBIT_HIDE,            16,     16);
        builder.register(Items.RABBIT_FOOT,            128,    8 );
        builder.register(Items.WHITE_WOOL,             48,     16);
        builder.register(Items.FEATHER,                48,     16);
        builder.register(Items.EGG,                    32,     8 );
        builder.register(Items.SLIME_BALL,             32,     16);
        builder.register(Items.INK_SAC,                16,     16);
        builder.register(Items.GLOW_INK_SAC,           64,     16);
        builder.register(Items.SCUTE,                  96,     8 );
        builder.register(Items.TURTLE_EGG,             192,    8 );
        builder.register(Items.OCHRE_FROGLIGHT,        512,    4 );
        builder.register(Items.PEARLESCENT_FROGLIGHT,  512,    4 );
        builder.register(Items.VERDANT_FROGLIGHT,      512,    4 );
        builder.register(Items.SPIDER_EYE,             128,    8 );
        builder.register(Items.STRING,                 12,     16);
        builder.register(Items.ROTTEN_FLESH,           32,     16);
        builder.register(Items.BONE,                   144,    16);
        builder.register(Items.GUNPOWDER,              192,    16);
        builder.register(Items.PHANTOM_MEMBRANE,       192,    16);
        builder.register(Items.ENDER_PEARL,            1024,   8 );
        builder.register(Items.NAUTILUS_SHELL,         1024,   8 );
        builder.register(Items.BLAZE_ROD,              1536,   8 );
        builder.register(Items.SHULKER_SHELL,          2048,   8 );
        builder.register(Items.GHAST_TEAR,             4096,   4 );
        builder.register(Items.NETHER_STAR,            131072, 4 );
        builder.register(Items.TOTEM_OF_UNDYING,       131072, 4 );
        builder.register(Items.DRAGON_EGG,             262144, 1 );
        builder.register(Items.SKELETON_SKULL,         256,    4 );
        builder.register(Items.ZOMBIE_HEAD,            256,    4 );
        builder.register(Items.CREEPER_HEAD,           256,    4 );
        builder.register(Items.TRIDENT,                16384,  2 );
        // nether.json
        builder.register(Items.WARPED_WART_BLOCK).valueRef(Items.NETHER_WART, 9).research(8).noRequiredResearch();
        builder.register(Items.NETHERRACK,             1,      16);
        builder.register(Items.CRIMSON_NYLIUM,         1,      16);
        builder.register(Items.WARPED_NYLIUM,          1,      16);
        builder.register(Items.CRIMSON_ROOTS,          1,      16);
        builder.register(Items.WARPED_ROOTS,           1,      16);
        builder.register(Items.NETHER_SPROUTS,         1,      16);
        builder.register(Items.CRIMSON_FUNGUS,         32,     16);
        builder.register(Items.WARPED_FUNGUS,          32,     16);
        builder.register(Items.WEEPING_VINES,          8,      16);
        builder.register(Items.TWISTING_VINES,         8,      16);
        builder.register(Items.SOUL_SAND,              4,      16);
        builder.register(Items.SOUL_SOIL,              4,      16);
        builder.register(Items.GLOWSTONE_DUST,         384,    16);
        builder.register(Items.BASALT,                 4,      16);
        builder.register(Items.BLACKSTONE,             4,      16);
        builder.register(Items.CRYING_OBSIDIAN,        768,    8 );
        builder.register(Items.GILDED_BLACKSTONE,      800,    8 );
        builder.register(Items.NETHER_WART,            24,     16);
        builder.register(Items.SHROOMLIGHT,            16,     16);
        // ores.json
        builder.register(Items.COAL,                   32,     16);
        builder.register(Items.REDSTONE,               64,     16);
        builder.register(C_COPPER_INGOTS,              128,    16);
        builder.register(C_IRON_INGOTS,                256,    16);
        builder.register(Items.QUARTZ,                 256,    16);
        builder.register(Items.LAPIS_LAZULI,           864,    16);
        builder.register(Items.AMETHYST_SHARD,         864,    16);
        builder.register(C_GOLD_INGOTS,                2048,   16);
        builder.register(Items.EMERALD,                8192,   8 );
        builder.register(Items.DIAMOND,                8192,   8 );
        builder.register(Items.NETHERITE_SCRAP,        32768,  8 );
        // surface.json
        builder.register(Items.DIRT,                   1,      16);
        builder.register(Items.DIRT_PATH,              1,      16);
        builder.register(Items.ROOTED_DIRT,            1,      16);
        builder.register(Items.GRASS_BLOCK,            1,      16);
        builder.register(Items.PODZOL,                 1,      16);
        builder.register(Items.MYCELIUM,               1,      16);
        builder.register(Items.MUD,                    1,      16);
        builder.register(Items.SAND,                   1,      16);
        builder.register(Items.RED_SAND,               1,      16);
        builder.register(Items.VINE,                   8,      16);
        builder.register(Items.MANGROVE_ROOTS,         4,      16);
        builder.register(Items.LILY_PAD,               16,     8 );
        builder.register(Items.RED_MUSHROOM,           32,     8 );
        builder.register(Items.BROWN_MUSHROOM,         32,     8 );
        builder.register(Items.RED_MUSHROOM_BLOCK,     32,     8 );
        builder.register(Items.BROWN_MUSHROOM_BLOCK,   32,     8 );
        builder.register(Items.MUSHROOM_STEM,          32,     8 );
        builder.register(Items.CACTUS,                 32,     16);
        builder.register(Items.SUGAR_CANE,             32,     16);
        builder.register(Items.BAMBOO,                 32,     16);
        builder.register(Items.GRASS,                  1,      16);
        builder.register(Items.TALL_GRASS,             1,      16);
        builder.register(Items.FERN,                   1,      16);
        builder.register(Items.LARGE_FERN,             1,      16);
        builder.register(Items.DEAD_BUSH,              1,      16);
        builder.register(Items.SNOW,                   1,      16);
        builder.register(Items.SNOWBALL,               1,      16);
        builder.register(Items.ICE,                    1,      16);
        // tags.json
        builder.register(ItemTags.LOGS,                32,     16);
        builder.register(ItemTags.SAPLINGS,            32,     16);
        builder.register(ItemTags.LEAVES,              4,      16);
        builder.register(ItemTags.PLANKS,              8,      16).nonAutomatable();
        builder.register(ItemTags.WOOL,                0,      16).valueRef(Items.WHITE_WOOL, 1).noRequiredResearch();
        builder.register(C_SHULKER_BOXES,              0,      1 ).valueRef(Items.SHULKER_BOX, 1).nonAutomatable();
        builder.register(ItemTags.TALL_FLOWERS,        32,     8 );
        builder.register(ItemTags.SMALL_FLOWERS,       16,     8 );
        builder.register(ItemTags.MUSIC_DISCS,         2048,   2 );
        // underground.json
        builder.register(Items.COBBLESTONE,            1,      16);
        builder.register(Items.COBBLED_DEEPSLATE,      1,      16);
        builder.register(Items.STONE,                  1,      16).nonAutomatable();
        builder.register(Items.DEEPSLATE,              1,      16).nonAutomatable();
        builder.register(Items.GRANITE,                1,      16);
        builder.register(Items.DIORITE,                1,      16);
        builder.register(Items.ANDESITE,               1,      16);
        builder.register(Items.TUFF,                   1,      16);
        builder.register(Items.DRIPSTONE_BLOCK,        1,      16);
        builder.register(Items.GRAVEL,                 4,      16);
        builder.register(Items.MOSS_BLOCK,             4,      16);
        builder.register(Items.CALCITE,                4,      16);
        builder.register(Items.SPORE_BLOSSOM,          16,     8 );
        builder.register(Items.BIG_DRIPLEAF,           16,     8 );
        builder.register(Items.SMALL_DRIPLEAF,         16,     8 );
        builder.register(Items.HANGING_ROOTS,          1,      16);
        builder.register(Items.GLOW_LICHEN,            1,      16);
        builder.register(Items.POINTED_DRIPSTONE,      1,      16);
        builder.register(Items.SCULK,                  48,     16);
        builder.register(Items.SCULK_VEIN,             1,      16);
        builder.register(Items.SCULK_SENSOR,           256,    8 );
        builder.register(Items.SCULK_SHRIEKER,         512,    8 );
        builder.register(Items.SCULK_CATALYST,         2048,   8 );
        // underwater.json
        builder.register(Items.PRISMARINE_SHARD,       256,    16);
        builder.register(Items.PRISMARINE_CRYSTALS,    512,    16);
        builder.register(Items.HEART_OF_THE_SEA,       32768,  4 );
        builder.register(Items.SEAGRASS,               1,      16);
        builder.register(Items.KELP,                   1,      16);
        builder.register(Items.SPONGE,                 128,    16);
        builder.register(Items.WET_SPONGE,             128,    16);
        builder.register(Items.SEA_PICKLE,             16,     16);
        builder.register(Items.TUBE_CORAL,             16,     16);
        builder.register(Items.BRAIN_CORAL,            16,     16);
        builder.register(Items.BUBBLE_CORAL,           16,     16);
        builder.register(Items.FIRE_CORAL,             16,     16);
        builder.register(Items.HORN_CORAL,             16,     16);
        builder.register(Items.TUBE_CORAL_FAN,         16,     16);
        builder.register(Items.BRAIN_CORAL_FAN,        16,     16);
        builder.register(Items.BUBBLE_CORAL_FAN,       16,     16);
        builder.register(Items.FIRE_CORAL_FAN,         16,     16);
        builder.register(Items.HORN_CORAL_FAN,         16,     16);
        builder.register(Items.TUBE_CORAL_BLOCK,       64,     16);
        builder.register(Items.BRAIN_CORAL_BLOCK,      64,     16);
        builder.register(Items.BUBBLE_CORAL_BLOCK,     64,     16);
        builder.register(Items.FIRE_CORAL_BLOCK,       64,     16);
        builder.register(Items.HORN_CORAL_BLOCK,       64,     16);
        builder.register(Items.DEAD_TUBE_CORAL,        1,      16);
        builder.register(Items.DEAD_BRAIN_CORAL,       1,      16);
        builder.register(Items.DEAD_BUBBLE_CORAL,      1,      16);
        builder.register(Items.DEAD_FIRE_CORAL,        1,      16);
        builder.register(Items.DEAD_HORN_CORAL,        1,      16);
        builder.register(Items.DEAD_TUBE_CORAL_FAN,    1,      16);
        builder.register(Items.DEAD_BRAIN_CORAL_FAN,   1,      16);
        builder.register(Items.DEAD_BUBBLE_CORAL_FAN,  1,      16);
        builder.register(Items.DEAD_FIRE_CORAL_FAN,    1,      16);
        builder.register(Items.DEAD_HORN_CORAL_FAN,    1,      16);
        builder.register(Items.DEAD_TUBE_CORAL_BLOCK,  4,      16);
        builder.register(Items.DEAD_BRAIN_CORAL_BLOCK, 4,      16);
        builder.register(Items.DEAD_BUBBLE_CORAL_BLOCK,4,      16);
        builder.register(Items.DEAD_FIRE_CORAL_BLOCK,  4,      16);
        builder.register(Items.DEAD_HORN_CORAL_BLOCK,  4,      16);

        builder = itemBuilder(new Identifier(BitExchange.MOD_ID, "items/common")).noOverride();
        builder.register(C_BAUXITE_DUSTS,              128,    16);
        builder.register(C_TIN_INGOTS,                 256,    16);
        builder.register(C_LEAD_INGOTS,                256,    16);
        builder.register(C_ALUMINUM_INGOTS,            256,    16);
        builder.register(C_NICKEL_INGOTS,              512,    16);
        builder.register(C_SILVER_INGOTS,              512,    16);
        builder.register(C_URANIUM_INGOTS,             1024,   16);
        builder.register(C_TUNGSTEN_INGOTS,            1024,   16);
        builder.register(C_IRIDIUM_INGOTS,             2048,   16);
        builder.register(C_TITANIUM_INGOTS,            4096,   16);
        builder.register(C_PLATINUM_INGOTS,            4096,   16);
        builder.register(C_SALTS,                      16,     16);
        builder.register(C_SALT_DUSTS,                 16,     16);
        builder.register(C_COPPER_DUSTS).valueRef(Items.COPPER_INGOT, 1).research(1);
        builder.register(C_IRON_DUSTS  ).valueRef(Items.IRON_INGOT,   1).research(1);
        builder.register(C_GOLD_DUSTS  ).valueRef(Items.GOLD_INGOT,   1).research(1);

        builder = itemBuilder(new Identifier(BitExchange.MOD_ID, "items/modern_industrialization")).noOverride();
        builder.register(C_LIGNITE_COAL,               32,     16);
        builder.register(C_ANTIMONY_INGOTS,            256,    16);
        builder.register(C_MOZANITE_DUSTS,             8192,   8 );

        builder = itemBuilder(new Identifier(BitExchange.MOD_ID, "items/ae2")).noOverride();
        builder.register( AEItems.CERTUS_QUARTZ_DUST           .asItem(), 64, 16);
        builder.register( AEItems.CERTUS_QUARTZ_CRYSTAL        .asItem(), 0,  16).valueRef(AEItems.CERTUS_QUARTZ_DUST.asItem(), 1).nonAutomatable();
        builder.register( AEItems.CERTUS_QUARTZ_CRYSTAL_CHARGED.asItem(), 64, 16).nonAutomatable();
        builder.register(AEBlocks.SKY_STONE_BLOCK              .asItem(), 1,  16);
    }
}
